name: Preprod Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_ID: luxehaven-project
      ZONE: europe-west1-b
      VM_NAME: preprod-vm
      REMOTE_USER: issa
      REMOTE_PATH: /home/issa/Luxe-Haven
      VM_IP: 35.246.87.12

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/luxe-haven-back:latest ./back

      - name: Push backend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/luxe-haven-back:latest

      - name: Build frontend Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/luxe-haven-front:latest ./react-front

      - name: Push frontend Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/luxe-haven-front:latest

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup SSH private key and generate public key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_gcloud
          chmod 600 ~/.ssh/id_rsa_gcloud
          ssh-keygen -y -f ~/.ssh/id_rsa_gcloud > ~/.ssh/id_rsa_gcloud.pub

      - name: Add SSH public key to VM metadata
        run: |
          echo "issa:$(cat ~/.ssh/id_rsa_gcloud.pub)" > key-for-gcp.txt
          gcloud compute instances add-metadata ${{ env.VM_NAME }} \
            --zone=${{ env.ZONE }} \
            --metadata-from-file ssh-keys=key-for-gcp.txt

      - name: Add Google Cloud instance to known_hosts
        run: ssh-keyscan -H ${{ env.VM_IP }} >> ~/.ssh/known_hosts

      - name: Copier la clé publique dans le dossier ansible
        run: cp ~/.ssh/id_rsa_gcloud.pub ansible/id_rsa_gcloud.pub

      - name: Archive ansible folder
        run: tar czf ansible.tar.gz ansible/

      - name: Test de la connexion SSH via IAP
        run: |
          gcloud compute ssh --project=${{ env.PROJECT_ID }} --zone=${{ env.ZONE }} --tunnel-through-iap \
            --ssh-key-file ~/.ssh/id_rsa_gcloud \
            ${{ env.REMOTE_USER }}@${{ env.VM_NAME }} --command="echo 'Connexion SSH via IAP réussie'"

      - name: Copy ansible archive to remote VM
        run: |
          gcloud compute scp --project=${{ env.PROJECT_ID }} --zone=${{ env.ZONE }} --tunnel-through-iap \
            --ssh-key-file ~/.ssh/id_rsa_gcloud \
            ansible.tar.gz ${{ env.REMOTE_USER }}@${{ env.VM_NAME }}:${{ env.REMOTE_PATH }}

      - name: Extract ansible archive on VM
        run: |
          gcloud compute ssh --project=${{ env.PROJECT_ID }} --zone=${{ env.ZONE }} --tunnel-through-iap \
            --ssh-key-file ~/.ssh/id_rsa_gcloud --ssh-flag="-tt" \
            ${{ env.REMOTE_USER }}@${{ env.VM_NAME }} -- "tar xzf ${{ env.REMOTE_PATH }}/ansible.tar.gz -C ${{ env.REMOTE_PATH }}"

      - name: Run Ansible playbook remotely
        run: |
          gcloud compute ssh --project=${{ env.PROJECT_ID }} --zone=${{ env.ZONE }} --tunnel-through-iap \
            --ssh-key-file ~/.ssh/id_rsa_gcloud \
            ${{ env.REMOTE_USER }}@${{ env.VM_NAME }} -- \
            "cd ${{ env.REMOTE_PATH }}/ansible && ansible-playbook playbooks/site.yml -i inventory/hosts.ini --limit preprod"
